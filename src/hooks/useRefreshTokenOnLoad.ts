import { useEffect, useRef } from 'react';
import { useAuthStore } from '@/infrastructure/storage/tokenStorage';
import { isTokenValid } from '@/utils/jwt';

/**
 * Hook ƒë·ªÉ t·ª± ƒë·ªông refresh token khi c·∫ßn thi·∫øt
 * - Refresh khi v√†o trang n·∫øu token s·∫Øp h·∫øt h·∫°n
 * - T·ª± ƒë·ªông refresh sau 4 ph√∫t ƒë·ªÉ tr√°nh token h·∫øt h·∫°n
 * - Tr√°nh g·ªçi refresh li√™n t·ª•c khi ƒë√£ 401
 */
export const useRefreshTokenOnLoad = () => {
  const refreshTokenAsync = useAuthStore((state) => state.refreshTokenAsync);
  const token = useAuthStore((state) => state.token);
  const isRefreshing = useRef(false);
  const lastRefreshTime = useRef(0);

  useEffect(() => {
    const refreshIfNeeded = async () => {
      console.log('üîç useRefreshTokenOnLoad - Starting refresh check...');
      console.log('üîç Current token:', token ? 'EXISTS' : 'NULL');
      console.log('üîç Document cookies:', document.cookie);
      
      // Tr√°nh g·ªçi refresh li√™n t·ª•c
      if (isRefreshing.current) {
        console.log('‚è≥ Refresh already in progress, skipping...');
        return;
      }

      // Ch·ªâ refresh n·∫øu c√≥ token
      if (token) {
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          const expirationTime = payload.exp * 1000;
          const timeUntilExpiry = expirationTime - Date.now();
          
          console.log('üîç Token check:', {
            expiresAt: new Date(expirationTime).toISOString(),
            timeUntilExpiry: Math.round(timeUntilExpiry / 1000) + 's',
            isValid: isTokenValid(token)
          });
          
          // N·∫øu token h·∫øt h·∫°n ho·∫∑c s·∫Øp h·∫øt h·∫°n (trong v√≤ng 1 ph√∫t), refresh ngay
          if (!isTokenValid(token) || timeUntilExpiry < 60 * 1000) {
            // Tr√°nh g·ªçi refresh qu√° th∆∞·ªùng xuy√™n (√≠t nh·∫•t 30 gi√¢y)
            const now = Date.now();
            if (now - lastRefreshTime.current < 30000) {
              console.log('‚è≥ Refresh too recent, skipping...');
              return;
            }

            console.log('üîÑ Token expired or expires soon, refreshing...');
            isRefreshing.current = true;
            lastRefreshTime.current = now;
            
            const success = await refreshTokenAsync();
            
            if (!success) {
              console.log('‚ùå Refresh failed, stopping auto refresh');
              // N·∫øu refresh th·∫•t b·∫°i, KH√îNG clear auth - ƒë·ªÉ axios interceptor handle
              console.log('üîÑ Let axios interceptor handle the 401 error');
              return;
            }
            
            isRefreshing.current = false;
          } else {
            console.log('‚úÖ Token still valid');
          }
        } catch (error) {
          console.error('‚ùå Error checking token expiry:', error);
          // N·∫øu kh√¥ng parse ƒë∆∞·ª£c token, th·ª≠ refresh
          console.log('üîÑ Token invalid format, attempting refresh...');
          
          if (!isRefreshing.current) {
            isRefreshing.current = true;
            await refreshTokenAsync();
            isRefreshing.current = false;
          }
        }
      }
    };

    // Refresh ngay khi v√†o trang
    refreshIfNeeded();

    // T·ª± ƒë·ªông refresh sau 4 ph√∫t ƒë·ªÉ tr√°nh token h·∫øt h·∫°n
    const interval = setInterval(refreshIfNeeded, 4 * 60 * 1000);

    return () => {
      clearInterval(interval);
    };
  }, [refreshTokenAsync, token]);
};
