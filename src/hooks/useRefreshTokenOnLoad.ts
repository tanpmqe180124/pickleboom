import { useEffect } from 'react';
import { useAuthStore } from '@/infrastructure/storage/tokenStorage';
import { isTokenValid } from '@/utils/jwt';

/**
 * Hook ƒë·ªÉ t·ª± ƒë·ªông refresh token khi c·∫ßn thi·∫øt
 * - Refresh khi v√†o trang n·∫øu token s·∫Øp h·∫øt h·∫°n
 * - T·ª± ƒë·ªông refresh sau 4 ph√∫t ƒë·ªÉ tr√°nh token h·∫øt h·∫°n
 */
export const useRefreshTokenOnLoad = () => {
  const refreshTokenAsync = useAuthStore((state) => state.refreshTokenAsync);
  const token = useAuthStore((state) => state.token);

  useEffect(() => {
    const refreshIfNeeded = async () => {
      // Ch·ªâ refresh n·∫øu c√≥ token
      if (token) {
        try {
          const payload = JSON.parse(atob(token.split('.')[1]));
          const expirationTime = payload.exp * 1000;
          const timeUntilExpiry = expirationTime - Date.now();
          
          console.log('üîç Token check:', {
            expiresAt: new Date(expirationTime).toISOString(),
            timeUntilExpiry: Math.round(timeUntilExpiry / 1000) + 's',
            isValid: isTokenValid(token)
          });
          
          // N·∫øu token h·∫øt h·∫°n ho·∫∑c s·∫Øp h·∫øt h·∫°n (trong v√≤ng 1 ph√∫t), refresh ngay
          if (!isTokenValid(token) || timeUntilExpiry < 60 * 1000) {
            console.log('üîÑ Token expired or expires soon, refreshing...');
            await refreshTokenAsync();
          } else {
            console.log('‚úÖ Token still valid');
          }
        } catch (error) {
          console.error('‚ùå Error checking token expiry:', error);
          // N·∫øu kh√¥ng parse ƒë∆∞·ª£c token, th·ª≠ refresh
          console.log('üîÑ Token invalid format, attempting refresh...');
          await refreshTokenAsync();
        }
      }
    };

    // Refresh ngay khi v√†o trang
    refreshIfNeeded();

    // T·ª± ƒë·ªông refresh sau 4 ph√∫t ƒë·ªÉ tr√°nh token h·∫øt h·∫°n
    const interval = setInterval(refreshIfNeeded, 4 * 60 * 1000);

    return () => {
      clearInterval(interval);
    };
  }, [refreshTokenAsync, token]);
};
